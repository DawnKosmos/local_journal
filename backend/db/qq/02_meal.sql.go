// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: 02_meal.sql

package qq

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMeal = `-- name: CreateMeal :one
INSERT INTO meals
    (user_id, name, kcal, carb, fat, protein, amount, unix)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING meal_id
`

type CreateMealParams struct {
	UserID  int64            `json:"user_id"`
	Name    string           `json:"name"`
	Kcal    float64          `json:"kcal"`
	Carb    float64          `json:"carb"`
	Fat     float64          `json:"fat"`
	Protein float64          `json:"protein"`
	Amount  float64          `json:"amount"`
	Unix    pgtype.Timestamp `json:"unix"`
}

func (q *Queries) CreateMeal(ctx context.Context, arg CreateMealParams) (int32, error) {
	row := q.db.QueryRow(ctx, createMeal,
		arg.UserID,
		arg.Name,
		arg.Kcal,
		arg.Carb,
		arg.Fat,
		arg.Protein,
		arg.Amount,
		arg.Unix,
	)
	var meal_id int32
	err := row.Scan(&meal_id)
	return meal_id, err
}

const deleteMeal = `-- name: DeleteMeal :exec
DELETE
from meals
WHERE meal_id = $1
  and user_id = $2
`

type DeleteMealParams struct {
	MealID int32 `json:"meal_id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) DeleteMeal(ctx context.Context, arg DeleteMealParams) error {
	_, err := q.db.Exec(ctx, deleteMeal, arg.MealID, arg.UserID)
	return err
}

const getMealsDailySum = `-- name: GetMealsDailySum :many
SELECT date_trunc('day', unix) as day,
       sum(kcal)               as total_kcal,
       sum(carb)               as total_carb,
       sum(fat)                as total_fat,
       sum(protein)            as total_protein,
       sum(amount)             as total_amount
FROM meals
WHERE user_id = $1
  and unix < $2
GROUP BY day
LIMIT 7
`

type GetMealsDailySumParams struct {
	UserID int64            `json:"user_id"`
	Unix   pgtype.Timestamp `json:"unix"`
}

type GetMealsDailySumRow struct {
	Day          pgtype.Interval `json:"day"`
	TotalKcal    int64           `json:"total_kcal"`
	TotalCarb    int64           `json:"total_carb"`
	TotalFat     int64           `json:"total_fat"`
	TotalProtein int64           `json:"total_protein"`
	TotalAmount  int64           `json:"total_amount"`
}

func (q *Queries) GetMealsDailySum(ctx context.Context, arg GetMealsDailySumParams) ([]GetMealsDailySumRow, error) {
	rows, err := q.db.Query(ctx, getMealsDailySum, arg.UserID, arg.Unix)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMealsDailySumRow
	for rows.Next() {
		var i GetMealsDailySumRow
		if err := rows.Scan(
			&i.Day,
			&i.TotalKcal,
			&i.TotalCarb,
			&i.TotalFat,
			&i.TotalProtein,
			&i.TotalAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const latestMeals = `-- name: LatestMeals :many
SELECT meal_id,
       name,
       kcal,
       carb,
       fat,
       protein,
       amount,
       unix
FROM meals
WHERE user_id = $1
ORDER BY unix DESC
LIMIT 7
`

type LatestMealsRow struct {
	MealID  int32            `json:"meal_id"`
	Name    string           `json:"name"`
	Kcal    float64          `json:"kcal"`
	Carb    float64          `json:"carb"`
	Fat     float64          `json:"fat"`
	Protein float64          `json:"protein"`
	Amount  float64          `json:"amount"`
	Unix    pgtype.Timestamp `json:"unix"`
}

func (q *Queries) LatestMeals(ctx context.Context, userID int64) ([]LatestMealsRow, error) {
	rows, err := q.db.Query(ctx, latestMeals, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LatestMealsRow
	for rows.Next() {
		var i LatestMealsRow
		if err := rows.Scan(
			&i.MealID,
			&i.Name,
			&i.Kcal,
			&i.Carb,
			&i.Fat,
			&i.Protein,
			&i.Amount,
			&i.Unix,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readMeal = `-- name: ReadMeal :one
SELECT meal_id, user_id, name, kcal, carb, fat, protein, amount, unix
FROM meals
WHERE meal_id = $1
`

func (q *Queries) ReadMeal(ctx context.Context, mealID int32) (Meal, error) {
	row := q.db.QueryRow(ctx, readMeal, mealID)
	var i Meal
	err := row.Scan(
		&i.MealID,
		&i.UserID,
		&i.Name,
		&i.Kcal,
		&i.Carb,
		&i.Fat,
		&i.Protein,
		&i.Amount,
		&i.Unix,
	)
	return i, err
}

const readMeals = `-- name: ReadMeals :many
SELECT meal_id, user_id, name, kcal, carb, fat, protein, amount, unix
FROM meals
WHERE user_id = $1
  and unix < $2
LIMIT 10
`

type ReadMealsParams struct {
	UserID int64            `json:"user_id"`
	Unix   pgtype.Timestamp `json:"unix"`
}

func (q *Queries) ReadMeals(ctx context.Context, arg ReadMealsParams) ([]Meal, error) {
	rows, err := q.db.Query(ctx, readMeals, arg.UserID, arg.Unix)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Meal
	for rows.Next() {
		var i Meal
		if err := rows.Scan(
			&i.MealID,
			&i.UserID,
			&i.Name,
			&i.Kcal,
			&i.Carb,
			&i.Fat,
			&i.Protein,
			&i.Amount,
			&i.Unix,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
