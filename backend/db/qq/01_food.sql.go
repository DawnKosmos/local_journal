// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: 01_food.sql

package qq

import (
	"context"
)

const createFood = `-- name: CreateFood :one
INSERT INTO foods(user_id, name, kcal, carb, fat, protein, default_amount)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING food_id
`

type CreateFoodParams struct {
	UserID        int64   `json:"user_id"`
	Name          string  `json:"name"`
	Kcal          float64 `json:"kcal"`
	Carb          float64 `json:"carb"`
	Fat           float64 `json:"fat"`
	Protein       float64 `json:"protein"`
	DefaultAmount int32   `json:"default_amount"`
}

func (q *Queries) CreateFood(ctx context.Context, arg CreateFoodParams) (int32, error) {
	row := q.db.QueryRow(ctx, createFood,
		arg.UserID,
		arg.Name,
		arg.Kcal,
		arg.Carb,
		arg.Fat,
		arg.Protein,
		arg.DefaultAmount,
	)
	var food_id int32
	err := row.Scan(&food_id)
	return food_id, err
}

const deleteFood = `-- name: DeleteFood :exec
DELETE
FROM foods
WHERE food_id = $1
`

func (q *Queries) DeleteFood(ctx context.Context, foodID int32) error {
	_, err := q.db.Exec(ctx, deleteFood, foodID)
	return err
}

const readFood = `-- name: ReadFood :one
SELECT food_id, user_id, name, kcal, carb, fat, protein, default_amount
FROM foods
WHERE food_id = $1
`

func (q *Queries) ReadFood(ctx context.Context, foodID int32) (Food, error) {
	row := q.db.QueryRow(ctx, readFood, foodID)
	var i Food
	err := row.Scan(
		&i.FoodID,
		&i.UserID,
		&i.Name,
		&i.Kcal,
		&i.Carb,
		&i.Fat,
		&i.Protein,
		&i.DefaultAmount,
	)
	return i, err
}

const readFoods = `-- name: ReadFoods :many
SELECT food_id, name
FROM foods
WHERE user_id = $1
   or user_id = 1
`

type ReadFoodsRow struct {
	FoodID int32  `json:"food_id"`
	Name   string `json:"name"`
}

func (q *Queries) ReadFoods(ctx context.Context, userID int64) ([]ReadFoodsRow, error) {
	rows, err := q.db.Query(ctx, readFoods, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadFoodsRow
	for rows.Next() {
		var i ReadFoodsRow
		if err := rows.Scan(&i.FoodID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
