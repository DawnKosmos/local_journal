// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: 03_meal_food.sql

package qq

import (
	"context"
)

const createMealFood = `-- name: CreateMealFood :exec
INSERT INTO meal_food
    (food_id, meal_id, amount)
VALUES ($1, $2, $3)
`

type CreateMealFoodParams struct {
	FoodID int32 `json:"food_id"`
	MealID int32 `json:"meal_id"`
	Amount int32 `json:"amount"`
}

func (q *Queries) CreateMealFood(ctx context.Context, arg CreateMealFoodParams) error {
	_, err := q.db.Exec(ctx, createMealFood, arg.FoodID, arg.MealID, arg.Amount)
	return err
}

const deleteMealFood = `-- name: DeleteMealFood :exec
DELETE
FROM meal_food
WHERE food_id = $1
  and meal_id = $2
`

type DeleteMealFoodParams struct {
	FoodID int32 `json:"food_id"`
	MealID int32 `json:"meal_id"`
}

func (q *Queries) DeleteMealFood(ctx context.Context, arg DeleteMealFoodParams) error {
	_, err := q.db.Exec(ctx, deleteMealFood, arg.FoodID, arg.MealID)
	return err
}

const readFoodsFromMeal = `-- name: ReadFoodsFromMeal :many
SELECT foods.food_id, foods.name, foods.kcal, foods.carb,foods.fat,foods.protein, meal_food.amount
FROM meal_food
         JOIN foods ON meal_food.food_id = foods.food_id
WHERE meal_food.meal_id = $1
`

type ReadFoodsFromMealRow struct {
	FoodID  int32   `json:"food_id"`
	Name    string  `json:"name"`
	Kcal    float64 `json:"kcal"`
	Carb    float64 `json:"carb"`
	Fat     float64 `json:"fat"`
	Protein float64 `json:"protein"`
	Amount  int32   `json:"amount"`
}

func (q *Queries) ReadFoodsFromMeal(ctx context.Context, mealID int32) ([]ReadFoodsFromMealRow, error) {
	rows, err := q.db.Query(ctx, readFoodsFromMeal, mealID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadFoodsFromMealRow
	for rows.Next() {
		var i ReadFoodsFromMealRow
		if err := rows.Scan(
			&i.FoodID,
			&i.Name,
			&i.Kcal,
			&i.Carb,
			&i.Fat,
			&i.Protein,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMealFood = `-- name: UpdateMealFood :exec
UPDATE meal_food
SET amount = $1
WHERE food_id = $2
  and meal_id = $3
`

type UpdateMealFoodParams struct {
	Amount int32 `json:"amount"`
	FoodID int32 `json:"food_id"`
	MealID int32 `json:"meal_id"`
}

func (q *Queries) UpdateMealFood(ctx context.Context, arg UpdateMealFoodParams) error {
	_, err := q.db.Exec(ctx, updateMealFood, arg.Amount, arg.FoodID, arg.MealID)
	return err
}
